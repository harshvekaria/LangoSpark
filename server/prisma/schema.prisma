generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// **User & Profile Management**
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  learningPlans LearningPlan[]
  progress      Progress[]
  pronunciationFeedback PronunciationFeedback[]
  conversationPractices ConversationPractice[]
}

model Profile {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id])
  name       String
  age        Int?
  nativeLang String
  learningLangs LearningLanguage[]
}

model LearningLanguage {
  id        String @id @default(uuid())
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  language  String
  level     String  /// e.g., Beginner, Intermediate, Advanced
}

/// **Learning Plan & Progress Tracking**
model LearningPlan {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  language  String
  goal      String   /// E.g., "Conversational Fluency"
  createdAt DateTime @default(now())
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  score     Int?
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

/// **Lesson & Quizzes**
model Lesson {
  id        String   @id @default(uuid())
  title     String
  language  String
  content   String   /// JSON structure for lesson content
  quiz      Quiz?
  progress  Progress[]  /// âœ… Fix: Inverse relation for Progress
  createdAt DateTime @default(now())
}

model Quiz {
  id        String   @id @default(uuid())
  lessonId  String   @unique
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  questions Json     /// Array of multiple-choice questions
}

/// **Speech Recognition & AI Feedback**
model PronunciationFeedback {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  sentence    String
  accuracy    Float    /// 0.0 - 1.0 scoring
  feedback    String   /// AI-generated feedback
  createdAt   DateTime @default(now())
}

model ConversationPractice {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  transcript Json     /// Store conversation history as JSON
  createdAt DateTime @default(now())
}
